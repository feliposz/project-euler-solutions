{-
Highly divisible triangular number
Problem 12
The sequence of triangle numbers is generated by adding the natural numbers. So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:

1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...

Let us list the factors of the first seven triangle numbers:

 1: 1
 3: 1,3
 6: 1,2,3,6
10: 1,2,5,10
15: 1,3,5,15
21: 1,3,7,21
28: 1,2,4,7,14,28
We can see that 28 is the first triangle number to have over five divisors.

What is the value of the first triangle number to have over five hundred divisors?
-}
import Data.List
import Math.NumberTheory.Primes.Factorisation (factorise)

-- 1 My first simple implementation (slow)

-- nub is to account for perfect squares
divisors n = nub $ concat [ [d, n `div` d] | d <- [1..sqn], n `mod` d == 0 ]
	where sqn = (floor (sqrt (fromIntegral n)))

divisors' n = [ d | d <- [1..n], n `mod` d == 0]

numDivisors n = length (divisors n)
numDivisors' n = length (divisors' n)

tryNumbers n i
	| numDivisors n > 500 = n
	| otherwise = tryNumbers (n+i) (i+1)

euler12 = tryNumbers 1 2


-- 2 A better version, using prime factorization (import Math.NumberTheory.Primes.Factorisation (factorise))
-- http://projecteuler.net/overview=012

numDivisorsFast n = product [ e+1 | (b,e) <- factorise n ]

tryNumbersFast n i
	| numDivisorsFast n > 500 = n
	| otherwise = tryNumbersFast (n+i) (i+1)

euler12Fast = tryNumbersFast 1 2
